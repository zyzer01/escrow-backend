// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  username          String?   @unique
  name              String
  email             String    @unique
  emailVerified     Boolean   @default(false)
  image             String?
  role              String?    @default("user")
  banned            Boolean?   @default(false)
  banReason         String?
  banExpires        BigInt?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  dob               String?

  profile       Profile?
  sessions      Session[]
  accounts      Account[]
  
  createdBets   Bet[]     @relation("BetCreator")
  joinedBets    Bet[]     @relation("BetOpponent")
  wonBets       Bet[]     @relation("BetWinner")
  opponentEmail Bet[]   @relation("BetOpponentEmail")

  @@map("user")
}

model Profile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalBets    Int     @default(0)
  totalWagered Float  @default(0.0)
  totalWon     Float   @default(0.0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
